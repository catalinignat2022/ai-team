// Generated by DevOps AI Agent - Frontend JavaScript

class App {
    constructor() {
        this.init();
    }
    
    init() {
        console.log('generic_webapp app initialized');
        this.setupEventListeners();
        this.loadData();
    }
    
    setupEventListeners() {
        // Form submissions
        document.addEventListener('submit', (e) => {
            if (e.target.matches('.ajax-form')) {
                e.preventDefault();
                this.handleFormSubmit(e.target);
            }
        });
        
        // Button clicks
        document.addEventListener('click', (e) => {
            if (e.target.matches('.btn-ajax')) {
                e.preventDefault();
                this.handleButtonClick(e.target);
            }
        });
    }
    
    async handleFormSubmit(form) {
        const formData = new FormData(form);
        const data = Object.fromEntries(formData.entries());
        
        try {
            this.showLoading(form);
            
            const response = await fetch(form.action || '/api/submit', {
                method: form.method || 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            });
            
            const result = await response.json();
            
            if (result.success) {
                this.showSuccess('Operation completed successfully!');
                form.reset();
                this.loadData();
            } else {
                this.showError(result.message || 'Operation failed');
            }
            
        } catch (error) {
            this.showError('Network error occurred');
            console.error('Form submission error:', error);
        } finally {
            this.hideLoading(form);
        }
    }
    
    async loadData() {
        try {
            const response = await fetch('/api/data');
            const data = await response.json();
            this.renderData(data);
        } catch (error) {
            console.error('Data loading error:', error);
        }
    }
    
    renderData(data) {
        const container = document.getElementById('data-container');
        if (container && data.items) {
            container.innerHTML = data.items.map(item => 
                `<div class="data-item">${this.renderItem(item)}</div>`
            ).join('');
        }
    }
    
    renderItem(item) {
        return `
            <h3>${item.title || item.name}</h3>
            <p>${item.description || item.content}</p>
            <small>${new Date(item.createdAt).toLocaleDateString()}</small>
        `;
    }
    
    showLoading(element) {
        const spinner = document.createElement('div');
        spinner.className = 'spinner';
        spinner.id = 'loading-spinner';
        element.appendChild(spinner);
        
        const buttons = element.querySelectorAll('button');
        buttons.forEach(btn => btn.disabled = true);
    }
    
    hideLoading(element) {
        const spinner = element.querySelector('#loading-spinner');
        if (spinner) spinner.remove();
        
        const buttons = element.querySelectorAll('button');
        buttons.forEach(btn => btn.disabled = false);
    }
    
    showSuccess(message) {
        this.showAlert(message, 'success');
    }
    
    showError(message) {
        this.showAlert(message, 'error');
    }
    
    showAlert(message, type) {
        const alert = document.createElement('div');
        alert.className = `alert alert-${type}`;
        alert.textContent = message;
        alert.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 20px;
            border-radius: 8px;
            color: white;
            font-weight: 500;
            z-index: 10000;
            background: ${type === 'success' ? '#4caf50' : '#f44336'};
            animation: slideIn 0.3s ease-out;
        `;
        
        document.body.appendChild(alert);
        
        setTimeout(() => {
            alert.style.animation = 'slideOut 0.3s ease-in forwards';
            setTimeout(() => alert.remove(), 300);
        }, 4000);
    }
}

// Initialize generic app
const app = new App();
