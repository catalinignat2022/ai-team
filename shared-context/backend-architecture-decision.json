{
  "version": "1.0.0",
  "created_at": "2025-09-13T19:59:57.913Z",
  "project_requirements": "# üöÄ ROMANIAN DATING APP - PRODUCT REQUIREMENTS DOCUMENT\n\n## 1. PRODUCT VISION\n\n**Problem Statement:** \nRomanian singles struggle to find meaningful connections through generic international dating platforms that don't understand local culture, language nuances, and relationship expectations.\n\n**Vision Statement:**\n\"To create Romania's premier dating platform that celebrates local culture while leveraging cutting-edge AI to facilitate authentic, lasting relationships between Romanian singles.\"\n\n**Value Proposition:**\n- Cultural authenticity with Romanian-specific features\n- AI-powered matching based on local preferences\n- Secure, scalable platform built for Romanian market\n\n---\n\n## 2. USER PERSONAS\n\n### üë§ **Primary Persona: \"Mihai - Urban Professional\"**\n- **Age:** 28-35\n- **Location:** Bucure»ôti, Cluj, Timi»ôoara\n- **Occupation:** IT, Finance, Marketing\n- **Goals:** Serious relationship, marriage-minded\n- **Pain Points:** Limited time, wants quality matches\n- **Tech Savvy:** High, expects modern UX\n\n### üë§ **Secondary Persona: \"Ana - Creative Millennial\"**\n- **Age:** 24-32\n- **Location:** Urban/Semi-urban Romania\n- **Occupation:** Design, Media, Education\n- **Goals:** Authentic connections, shared interests\n- **Pain Points:** Superficial matches, cultural misunderstanding\n- **Tech Savvy:** Medium-High\n\n### üë§ **Tertiary Persona: \"Radu - Returning Expat\"**\n- **Age:** 30-40\n- **Location:** Recently returned to Romania\n- **Occupation:** Various, international experience\n- **Goals:** Reconnect with Romanian culture, find partner\n- **Pain Points:** Cultural re-adaptation, trust issues\n- **Tech Savvy:** High\n\n---\n\n## 3. FEATURE BREAKDOWN\n\n### üéØ **CORE FEATURES (MVP)**\n1. **User Registration & Profile Creation**\n2. **AI-Powered Matching Algorithm**\n3. **Chat/Messaging System**\n4. **Profile Discovery & Swiping**\n5. **Basic Search & Filters**\n6. **Photo Upload & Verification**\n7. **Push Notifications**\n8. **Basic Admin Panel**\n\n### ‚≠ê **ENHANCED FEATURES (Phase 2)**\n1. **Video Chat Integration**\n2. **Advanced AI Personality Matching**\n3. **Romanian Culture Quiz Integration**\n4. **Location-based Events**\n5. **Premium Subscription Features**\n6. **Social Media Integration**\n\n### üöÄ **FUTURE FEATURES (Phase 3)**\n1. **AR/VR Dating Experiences**\n2. **Blockchain Identity Verification**\n3. **AI Dating Coach**\n4. **Group Dating Features**\n5. **International Romanian Diaspora Matching**\n\n---\n\n## 4. USER STORIES\n\n### **AUTHENTICATION & PROFILE**\n```\nEpic: User Onboarding\n```\n\n**US-001:** As a new user, I want to register with email/phone so that I can create my dating profile.\n**US-002:** As a user, I want to complete a cultural compatibility quiz so that I get better matches.\n**US-003:** As a user, I want to upload and verify my photos so that others trust my profile.\n**US-004:** As a user, I want to set my dating preferences so that I see relevant matches.\n\n### **MATCHING & DISCOVERY**\n```\nEpic: AI-Powered Matching\n```\n\n**US-005:** As a user, I want to see AI-curated matches so that I find compatible partners.\n**US-006:** As a user, I want to swipe through profiles so that I can quickly indicate interest.\n**US-007:** As a user, I want to search with filters so that I can find specific types of people.\n**US-008:** As a user, I want to see match compatibility scores so that I understand why we matched.\n\n### **COMMUNICATION**\n```\nEpic: User Interaction\n```\n\n**US-009:** As a matched user, I want to chat in real-time so that I can get to know my match.\n**US-010:** As a user, I want to send photos/voice messages so that I can communicate more expressively.\n**US-011:** As a user, I want video chat capability so that I can have face-to-face conversations.\n**US-012:** As a user, I want conversation starters so that I can break the ice easily.\n\n### **SAFETY & MODERATION**\n```\nEpic: Platform Safety\n```\n\n**US-013:** As a user, I want to report inappropriate behavior so that the platform stays safe.\n**US-014:** As a user, I want to block users so that I can avoid unwanted contact.\n**US-015:** As an admin, I want to moderate content so that I can maintain platform quality.\n\n---\n\n## 5. ACCEPTANCE CRITERIA\n\n### **US-001: User Registration**\n**Given** a new user visits the app\n**When** they provide valid email and password\n**Then** they receive verification email\n**And** can access profile creation flow\n**And** account is created in MongoDB with encrypted data\n\n### **US-005: AI Matching**\n**Given** a user has completed their profile\n**When** they access the discovery section\n**Then** they see 10+ AI-curated matches\n**And** matches are based on compatibility algorithm\n**And** matches refresh daily with new suggestions\n**And** compatibility score is displayed (60-99%)\n\n### **US-009: Real-time Chat**\n**Given** two users have matched\n**When** one user sends a message\n**Then** the other user receives it instantly\n**And** message is stored in MongoDB\n**And** both users see delivery/read status\n**And** chat history is preserved\n\n---\n\n## 6. NON-FUNCTIONAL REQUIREMENTS\n\n### **PERFORMANCE**\n- **Response Time:** < 2 seconds for all API calls\n- **Load Time:** App launch < 3 seconds\n- **Concurrent Users:** Support 10,000+ simultaneous users\n- **Database Queries:** < 100ms average response time\n- **Image Upload:** < 5 seconds for photos up to 5MB\n\n### **SECURITY**\n- **Data Encryption:** AES-256 for sensitive data\n- **Authentication:** JWT tokens with refresh mechanism\n- **API Security:** Rate limiting, input validation\n- **Photo Verification:** AI-powered fake photo detection\n- **Privacy:** GDPR compliance, data anonymization\n\n### **SCALABILITY**\n- **Horizontal Scaling:** MongoDB sharding support\n- **Auto-scaling:** Cloud infrastructure adaptation\n- **CDN Integration:** Global content delivery\n- **Microservices:** Modular architecture for scaling\n- **Caching:** Redis for session and frequently accessed data\n\n### **AVAILABILITY**\n- **Uptime:** 99.9% availability SLA\n- **Disaster Recovery:** Automated backups every 6 hours\n- **Monitoring:** Real-time performance monitoring\n- **Failover:** Automatic failover mechanisms\n\n---\n\n## 7. TECHNICAL REQUIREMENTS\n\n### **BACKEND ARCHITECTURE**\n```typescript\n// Core Technology Stack\n- Runtime: Node.js 18+ with TypeScript\n- Framework: Express.js with async/await patterns\n- Database: MongoDB 6.0+ with Mongoose ODM\n- Authentication: JWT + refresh tokens\n- Real-time: Socket.io for chat\n- File Storage: AWS S3 or Cloudinary\n- Caching: Redis for sessions\n```\n\n### **DATABASE SCHEMA (MongoDB)**\n```javascript\n// User Collection\n{\n  _id: ObjectId,\n  email: String (unique, encrypted),\n  password: String (bcrypt hashed),\n  profile: {\n    name: String,\n    age: Number,\n    location: GeoJSON,\n    photos: [String], // URLs\n    bio: String,\n    interests: [String],\n    culturalPreferences: Object\n  },\n  preferences: {\n    ageRange: [Number, Number],\n    maxDistance: Number,\n    interests: [String]\n  },\n  aiProfile: {\n    personalityVector: [Number], // AI-generated\n    compatibilityScores: Map,\n    lastAnalyzed: Date\n  },\n  createdAt: Date,\n  lastActive: Date\n}\n\n// Match Collection\n{\n  _id: ObjectId,\n  users: [ObjectId], // Array of 2 user IDs\n  compatibilityScore: Number,\n  status: String, // 'pending', 'mutual', 'expired'\n  createdAt: Date,\n  aiInsights: Object\n}\n\n// Message Collection\n{\n  _id: ObjectId,\n  matchId: ObjectId,\n  senderId: ObjectId,\n  content: String,\n  type: String, // 'text', 'image', 'voice'\n  timestamp: Date,\n  readAt: Date\n}\n```\n\n### **AI INTEGRATION REQUIREMENTS**\n```python\n# AI Services Integration\n- Matching Algorithm: TensorFlow/PyTorch model\n- Image Recognition: Computer Vision API\n- Natural Language Processing: Romanian language model\n- Personality Analysis: Custom ML pipeline\n- Recommendation Engine: Collaborative filtering\n```\n\n### **API ENDPOINTS**\n```typescript\n// Authentication\nPOST /api/auth/register\nPOST /api/auth/login\nPOST /api/auth/refresh\nPOST /api/auth/logout\n\n// Profile Management\nGET /api/profile/me\nPUT /api/profile/update\nPOST /api/profile/photos\nDELETE /api/profile/photos/:id\n\n// Matching & Discovery\nGET /api/matches/suggestions\nPOST /api/matches/swipe\nGET /api/matches/mutual\nGET /api/discovery/search\n\n// Messaging\nGET /api/messages/:matchId\nPOST /api/messages/send\nPUT /api/messages/:id/read\n```\n\n### **MOBILE REQUIREMENTS**\n- **iOS:** Swift 5.0+, iOS 14+ support\n- **Android:** Kotlin, API level 24+ (Android 7.0)\n- **Cross-platform:** React Native or Flutter consideration\n- **Push Notifications:** Firebase Cloud Messaging\n- **Offline Support:** Core features available offline\n\n---\n\n## 8. SUCCESS METRICS & KPIs\n\n### **USER ACQUISITION**\n- **Target:** 50,000 registered users in first 6 months\n- **CAC (Customer Acquisition Cost):** < $15 per user\n- **Organic Growth Rate:** 25% month-over-month\n- **App Store Rating:** 4.5+ stars\n\n### **ENGAGEMENT METRICS**\n- **DAU/MAU Ratio:** > 30%\n- **Session Duration:** Average 15+ minutes\n- **Messages per Match:** 10+ messages average\n- **Profile Completion Rate:** 85%+\n\n### **MATCHING SUCCESS**\n- **Match Rate:** 15-20% swipe-to-match conversion\n- **Conversation Rate:** 60% of matches start chatting\n- **Response Rate:** 70% message response rate\n- **Meeting Rate:** 25% of conversations lead to dates\n\n### **BUSINESS METRICS**\n- **Revenue per User:** $25 annual average\n- **Premium Conversion:** 15% of active users\n- **Churn Rate:** < 5% monthly\n- **Lifetime Value:** $150 per user\n\n### **TECHNICAL METRICS**\n- **API Response Time:** < 200ms average\n- **App Crash Rate:** < 0.1%\n- **Database Query Performance:** < 50ms\n- **Uptime:** 99.95%\n\n---\n\n## 9. RISK ASSESSMENT\n\n### **HIGH RISK** üî¥\n**Risk:** AI matching algorithm accuracy\n**Impact:** Poor user experience, low engagement\n**Mitigation:** Extensive A/B testing, gradual rollout, user feedback integration\n\n**Risk:** Data privacy breach\n**Impact:** Legal issues, user trust loss\n**Mitigation:** Security audits, encryption, GDPR compliance, regular penetration testing\n\n### **MEDIUM RISK** üü°\n**Risk:** Scalability issues during growth\n**Impact:** Performance degradation, user churn\n**Mitigation:** Load testing, auto-scaling infrastructure, performance monitoring\n\n**Risk:** Competition from established players\n**Impact:** Market share loss, user acquisition challenges\n**Mitigation:** Unique Romanian-focused features, superior UX, local partnerships\n\n### **LOW RISK** üü¢\n**Risk:** Third-party service dependencies\n**Impact:** Feature limitations, cost increases\n**Mitigation:** Multiple vendor options, fallback mechanisms, contract negotiations\n\n---\n\n## 10. MVP SCOPE - PHASE 1 DEPLOYMENT\n\n### **MUST HAVE (MVP Core)**\n‚úÖ User registration and authentication\n‚úÖ Basic profile creation with photos\n‚úÖ Simple matching algorithm (location + age)\n‚úÖ Chat messaging system\n‚úÖ Basic admin panel for moderation\n‚úÖ MongoDB database with core collections\n‚úÖ REST API with essential endpoints\n‚úÖ Basic mobile app (iOS/Android)\n\n### **SHOULD HAVE (MVP Enhanced)**\n‚úÖ AI-powered matching algorithm\n‚úÖ Photo verification system\n‚úÖ Push notifications\n‚úÖ Advanced search filters\n‚úÖ Real-time chat with Socket.io\n‚úÖ Basic analytics dashboard\n\n### **COULD HAVE (Post-MVP)**\n‚è≥ Video chat integration\n‚è≥ Premium subscription features\n‚è≥ Social media integration\n‚è≥ Advanced AI personality matching\n\n### **WON'T HAVE (Future Phases)**\n‚ùå AR/VR features\n‚ùå Blockchain verification\n‚ùå International expansion\n‚ùå Group dating features\n\n---\n\n## üìã DEPLOYMENT CHECKLIST\n\n### **PRE-DEPLOYMENT**\n- [ ] MongoDB Atlas cluster configured\n- [ ] All database indexes created\n- [ ] API endpoints tested and documented\n- [ ] Security audit completed\n- [ ] Performance testing passed\n- [ ] GDPR compliance verified\n\n### **DEPLOYMENT**\n- [ ] Production environment setup\n- [ ] CI/CD pipeline configured\n- [ ] Monitoring and logging active\n- [ ] Backup systems operational\n- [ ] SSL certificates installed\n\n### **POST-DEPLOYMENT**\n- [ ] User acceptance testing\n- [ ] Performance monitoring active\n- [ ] Customer support ready\n- [ ] Marketing campaigns launched\n- [ ] Analytics tracking enabled\n\n---\n\n**Ready for development team handoff! üöÄ**\n\n*This PRD provides complete technical and business requirements for the Romanian Dating App with MongoDB integration and AI team collaboration.*",
  "api_architecture": "# üèóÔ∏è ROMANIAN DATING APP - COMPLETE BACKEND ARCHITECTURE\n\n## 1. API ARCHITECTURE OVERVIEW\n\n### **Framework Choice: Express.js + TypeScript**\n\n**Justificare pentru Express.js:**\n- **Maturitate:** 10+ ani √Æn produc»õie, ecosystem vast\n- **Performance:** Optimizat pentru high-throughput applications\n- **Flexibilitate:** Perfect pentru dating app cu diverse features\n- **Community:** Largest Node.js framework community\n- **TypeScript Support:** Excellent typing pentru complex business logic\n\n```typescript\n// package.json - Core Dependencies\n{\n  \"dependencies\": {\n    \"express\": \"^4.18.2\",\n    \"typescript\": \"^5.0.0\",\n    \"mongoose\": \"^7.5.0\",\n    \"socket.io\": \"^4.7.0\",\n    \"jsonwebtoken\": \"^9.0.0\",\n    \"bcryptjs\": \"^2.4.3\",\n    \"joi\": \"^17.9.0\",\n    \"helmet\": \"^7.0.0\",\n    \"cors\": \"^2.8.5\",\n    \"express-rate-limit\": \"^6.8.0\",\n    \"multer\": \"^1.4.5\",\n    \"cloudinary\": \"^1.40.0\",\n    \"redis\": \"^4.6.0\",\n    \"winston\": \"^3.10.0\",\n    \"nodemailer\": \"^6.9.0\"\n  }\n}\n```\n\n### **Project Structure**\n\n```\nromanian-dating-api/\n‚îú‚îÄ‚îÄ src/\n‚îÇ   ‚îú‚îÄ‚îÄ config/           # Configuration files\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ database.ts\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ redis.ts\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ cloudinary.ts\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ environment.ts\n‚îÇ   ‚îú‚îÄ‚îÄ controllers/      # Route handlers\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ auth.controller.ts\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ profile.controller.ts\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ matching.controller.ts\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ messaging.controller.ts\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ admin.controller.ts\n‚îÇ   ‚îú‚îÄ‚îÄ middleware/       # Custom middleware\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ auth.middleware.ts\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ validation.middleware.ts\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ upload.middleware.ts\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ rateLimiter.middleware.ts\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ error.middleware.ts\n‚îÇ   ‚îú‚îÄ‚îÄ models/          # Mongoose schemas\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ User.model.ts\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Match.model.ts\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Message.model.ts\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Report.model.ts\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ Notification.model.ts\n‚îÇ   ‚îú‚îÄ‚îÄ routes/          # API routes\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ auth.routes.ts\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ profile.routes.ts\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ matching.routes.ts\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ messaging.routes.ts\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ admin.routes.ts\n‚îÇ   ‚îú‚îÄ‚îÄ services/        # Business logic\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ auth.service.ts\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ matching.service.ts\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ai.service.ts\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ notification.service.ts\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ email.service.ts\n‚îÇ   ‚îú‚îÄ‚îÄ utils/           # Utility functions\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ logger.ts\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ validators.ts\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ helpers.ts\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ constants.ts\n‚îÇ   ‚îú‚îÄ‚îÄ types/           # TypeScript definitions\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ user.types.ts\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ match.types.ts\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ api.types.ts\n‚îÇ   ‚îú‚îÄ‚îÄ socket/          # Socket.io handlers\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ chat.socket.ts\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ presence.socket.ts\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ notification.socket.ts\n‚îÇ   ‚îî‚îÄ‚îÄ app.ts           # Express app setup\n‚îú‚îÄ‚îÄ tests/               # Test files\n‚îú‚îÄ‚îÄ docs/                # API documentation\n‚îú‚îÄ‚îÄ scripts/             # Database scripts\n‚îî‚îÄ‚îÄ railway.json         # Railway deployment config\n```\n\n### **Middleware Stack**\n\n```typescript\n// src/app.ts - Complete Express Setup\nimport express from 'express';\nimport cors from 'cors';\nimport helmet from 'helmet';\nimport compression from 'compression';\nimport rateLimit from 'express-rate-limit';\nimport { errorHandler } from './middleware/error.middleware';\nimport { requestLogger } from './middleware/logger.middleware';\n\nconst app = express();\n\n// Security Middleware\napp.use(helmet({\n  contentSecurityPolicy: {\n    directives: {\n      defaultSrc: [\"'self'\"],\n      imgSrc: [\"'self'\", \"data:\", \"https://res.cloudinary.com\"],\n      scriptSrc: [\"'self'\"],\n      styleSrc: [\"'self'\", \"'unsafe-inline'\"]\n    }\n  }\n}));\n\n// CORS Configuration\napp.use(cors({\n  origin: process.env.NODE_ENV === 'production' \n    ? ['https://romaniadating.app', 'https://admin.romaniadating.app']\n    : ['http://localhost:3000', 'http://localhost:3001'],\n  credentials: true,\n  methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH'],\n  allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With']\n}));\n\n// Rate Limiting\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // limit each IP to 100 requests per windowMs\n  message: {\n    error: 'Prea multe cereri. √éncearcƒÉ din nou √Æn 15 minute.',\n    code: 'RATE_LIMIT_EXCEEDED'\n  },\n  standardHeaders: true,\n  legacyHeaders: false\n});\n\napp.use('/api/', limiter);\n\n// Body Parsing\napp.use(express.json({ limit: '10mb' }));\napp.use(express.urlencoded({ extended: true, limit: '10mb' }));\napp.use(compression());\n\n// Request Logging\napp.use(requestLogger);\n\n// API Routes\napp.use('/api/auth', authRoutes);\napp.use('/api/profile', profileRoutes);\napp.use('/api/matching', matchingRoutes);\napp.use('/api/messaging', messagingRoutes);\napp.use('/api/admin', adminRoutes);\n\n// Health Check\napp.get('/health', (req, res) => {\n  res.status(200).json({\n    status: 'OK',\n    timestamp: new Date().toISOString(),\n    uptime: process.uptime(),\n    environment: process.env.NODE_ENV\n  });\n});\n\n// Error Handling\napp.use(errorHandler);\n\nexport default app;\n```\n\n---\n\n## 2. DATABASE DESIGN\n\n### **Database Choice: MongoDB**\n\n**Justificare pentru MongoDB:**\n- **Schema Flexibility:** Perfect pentru evolving user profiles\n- **Geospatial Queries:** Native support pentru location-based matching\n- **Horizontal Scaling:** Built-in sharding pentru growth\n- **JSON-like Documents:** Natural fit pentru mobile apps\n- **Aggregation Pipeline:** Powerful pentru complex matching algorithms\n\n### **Complete Database Schema**\n\n```typescript\n// src/models/User.model.ts\nimport mongoose, { Schema, Document } from 'mongoose';\nimport bcrypt from 'bcryptjs';\n\nexport interface IUser extends Document {\n  _id: mongoose.Types.ObjectId;\n  email: string;\n  password: string;\n  phoneNumber?: string;\n  isVerified: boolean;\n  verificationToken?: string;\n  resetPasswordToken?: string;\n  resetPasswordExpires?: Date;\n  \n  // Profile Information\n  profile: {\n    firstName: string;\n    lastName: string;\n    dateOfBirth: Date;\n    gender: 'male' | 'female' | 'non-binary';\n    location: {\n      type: 'Point';\n      coordinates: [number, number]; // [longitude, latitude]\n      city: string;\n      county: string;\n    };\n    photos: Array<{\n      url: string;\n      publicId: string;\n      isMain: boolean;\n      isVerified: boolean;\n      uploadedAt: Date;\n    }>;\n    bio: string;\n    occupation: string;\n    education: string;\n    height: number; // in cm\n    interests: string[];\n    languages: string[];\n    relationshipGoals: 'casual' | 'serious' | 'marriage' | 'friendship';\n    \n    // Romanian Cultural Preferences\n    culturalPreferences: {\n      religiousViews: string;\n      politicalViews: string;\n      familyPlans: 'yes' | 'no' | 'maybe';\n      smokingStatus: 'never' | 'occasionally' | 'regularly';\n      drinkingStatus: 'never' | 'occasionally' | 'regularly';\n      traditionalValues: number; // 1-10 scale\n    };\n  };\n  \n  // Matching Preferences\n  preferences: {\n    ageRange: {\n      min: number;\n      max: number;\n    };\n    maxDistance: number; // in km\n    genderPreference: 'male' | 'female' | 'both';\n    interestedIn: string[];\n    dealBreakers: string[];\n  };\n  \n  // AI Profile Data\n  aiProfile: {\n    personalityVector: number[]; // 50-dimensional vector\n    compatibilityScores: Map<string, number>;\n    lastAnalyzed: Date;\n    behaviorMetrics: {\n      responseTime: number; // average in minutes\n      messageLength: number; // average characters\n      activeHours: number[]; // hours of day when active\n      swipePattern: {\n        selectivity: number; // percentage of right swipes\n        averageTimePerProfile: number; // seconds\n      };\n    };\n  };\n  \n  // Account Status\n  accountStatus: 'active' | 'suspended' | 'banned' | 'deleted';\n  subscriptionType: 'free' | 'premium' | 'gold';\n  subscriptionExpires?: Date;\n  \n  // Privacy Settings\n  privacySettings: {\n    showAge: boolean;\n    showDistance: boolean;\n    showLastActive: boolean;\n    incognitoMode: boolean;\n  };\n  \n  // Metadata\n  createdAt: Date;\n  updatedAt: Date;\n  lastActive: Date;\n  loginCount: number;\n  reportCount: number;\n}\n\nconst UserSchema = new Schema<IUser>({\n  email: {\n    type: String,\n    required: true,\n    unique: true,\n    lowercase: true,\n    trim: true,\n    match: [/^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/, 'Email invalid']\n  },\n  password: {\n    type: String,\n    required: true,\n    minlength: 8,\n    select: false // Don't include in queries by default\n  },\n  phoneNumber: {\n    type: String,\n    sparse: true,\n    unique: true,\n    match: [/^(\\+4|4|0)\\d{8,9}$/, 'NumƒÉr de telefon invalid']\n  },\n  isVerified: { type: Boolean, default: false },\n  verificationToken: String,\n  resetPasswordToken: String,\n  resetPasswordExpires: Date,\n  \n  profile: {\n    firstName: { type: String, required: true, trim: true, maxlength: 50 },\n    lastName: { type: String, required: true, trim: true, maxlength: 50 },\n    dateOfBirth: { type: Date, required: true },\n    gender: { \n      type: String, \n      required: true, \n      enum: ['male', 'female', 'non-binary'] \n    },\n    location: {\n      type: {\n        type: String,\n        enum: ['Point'],\n        required: true\n      },\n      coordinates: {\n        type: [Number],\n        required: true,\n        index: '2dsphere'\n      },\n      city: { type: String, required: true },\n      county: { type: String, required: true }\n    },\n    photos: [{\n      url: { type: String, required: true },\n      publicId: { type: String, required: true },\n      isMain: { type: Boolean, default: false },\n      isVerified: { type: Boolean, default: false },\n      uploadedAt: { type: Date, default: Date.now }\n    }],\n    bio: { type: String, maxlength: 500 },\n    occupation: String,\n    education: String,\n    height: { type: Number, min: 140, max: 220 },\n    interests: [{ type: String, maxlength: 30 }],\n    languages: [String],\n    relationshipGoals: {\n      type: String,\n      enum: ['casual', 'serious', 'marriage', 'friendship'],\n      required: true\n    },\n    \n    culturalPreferences: {\n      religiousViews: String,\n      politicalViews: String,\n      familyPlans: { type: String, enum: ['yes', 'no', 'maybe'] },\n      smokingStatus: { type: String, enum: ['never', 'occasionally', 'regularly'] },\n      drinkingStatus: { type: String, enum: ['never', 'occasionally', 'regularly'] },\n      traditionalValues: { type: Number, min: 1, max: 10 }\n    }\n  },\n  \n  preferences: {\n    ageRange: {\n      min: { type: Number, required: true, min: 18, max: 100 },\n      max: { type: Number, required: true, min: 18, max: 100 }\n    },\n    maxDistance: { type: Number, required: true, min: 1, max: 500 },\n    genderPreference: { \n      type: String, \n      required: true, \n      enum: ['male', 'female', 'both'] \n    },\n    interestedIn: [String],\n    dealBreakers: [String]\n  },\n  \n  aiProfile: {\n    personalityVector: [{ type: Number }],\n    compatibilityScores: { type: Map, of: Number },\n    lastAnalyzed: Date,\n    behaviorMetrics: {\n      responseTime: { type: Number, default: 0 },\n      messageLength: { type: Number, default: 0 },\n      activeHours: [{ type: Number, min: 0, max: 23 }],\n      swipePattern: {\n        selectivity: { type: Number, min: 0, max: 100 },\n        averageTimePerProfile: { type: Number, default: 0 }\n      }\n    }\n  },\n  \n  accountStatus: {\n    type: String,\n    enum: ['active', 'suspended', 'banned', 'deleted'],\n    default: 'active'\n  },\n  subscriptionType: {\n    type: String,\n    enum: ['free', 'premium', 'gold'],\n    default: 'free'\n  },\n  subscriptionExpires: Date,\n  \n  privacySettings: {\n    showAge: { type: Boolean, default: true },\n    showDistance: { type: Boolean, default: true },\n    showLastActive: { type: Boolean, default: true },\n    incognitoMode: { type: Boolean, default: false }\n  },\n  \n  lastActive: { type: Date, default: Date.now },\n  loginCount: { type: Number, default: 0 },\n  reportCount: { type: Number, default: 0 }\n}, {\n  timestamps: true,\n  toJSON: { virtuals: true },\n  toObject: { virtuals: true }\n});\n\n// Indexes for Performance\nUserSchema.index({",
  "decided_by": "Backend Developer AI",
  "status": "architecture_designed"
}