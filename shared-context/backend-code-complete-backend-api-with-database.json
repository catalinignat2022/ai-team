{
  "feature_name": "Complete Backend API with Database",
  "generated_code": "# Complete Backend API with Database - Romanian Dating App\n\n## 1. PROJECT STRUCTURE\n\n```\nromanian-dating-backend/\n├── src/\n│   ├── config/\n│   │   ├── database.js\n│   │   ├── jwt.js\n│   │   └── socket.js\n│   ├── controllers/\n│   │   ├── authController.js\n│   │   ├── userController.js\n│   │   ├── matchController.js\n│   │   ├── messageController.js\n│   │   └── uploadController.js\n│   ├── middleware/\n│   │   ├── auth.js\n│   │   ├── validation.js\n│   │   ├── upload.js\n│   │   └── errorHandler.js\n│   ├── models/\n│   │   ├── User.js\n│   │   ├── Match.js\n│   │   ├── Message.js\n│   │   └── Report.js\n│   ├── routes/\n│   │   ├── auth.js\n│   │   ├── users.js\n│   │   ├── matches.js\n│   │   ├── messages.js\n│   │   └── upload.js\n│   ├── services/\n│   │   ├── authService.js\n│   │   ├── matchService.js\n│   │   ├── messageService.js\n│   │   └── emailService.js\n│   ├── utils/\n│   │   ├── helpers.js\n│   │   ├── validators.js\n│   │   └── constants.js\n│   ├── socket/\n│   │   ├── socketHandler.js\n│   │   └── socketEvents.js\n│   └── app.js\n├── tests/\n│   ├── unit/\n│   ├── integration/\n│   └── setup.js\n├── migrations/\n├── seeds/\n├── uploads/\n├── .env.example\n├── .gitignore\n├── package.json\n├── server.js\n├── Dockerfile\n└── railway.json\n```\n\n## 2. PACKAGE.JSON\n\n```json\n{\n  \"name\": \"romanian-dating-backend\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Backend API pentru aplicația de dating românească\",\n  \"main\": \"server.js\",\n  \"scripts\": {\n    \"start\": \"node server.js\",\n    \"dev\": \"nodemon server.js\",\n    \"test\": \"jest\",\n    \"test:watch\": \"jest --watch\",\n    \"migrate\": \"node migrations/migrate.js\",\n    \"seed\": \"node seeds/seed.js\"\n  },\n  \"dependencies\": {\n    \"express\": \"^4.18.2\",\n    \"mongoose\": \"^7.5.0\",\n    \"bcryptjs\": \"^2.4.3\",\n    \"jsonwebtoken\": \"^9.0.2\",\n    \"joi\": \"^17.9.2\",\n    \"multer\": \"^1.4.5-lts.1\",\n    \"cloudinary\": \"^1.40.0\",\n    \"socket.io\": \"^4.7.2\",\n    \"cors\": \"^2.8.5\",\n    \"helmet\": \"^7.0.0\",\n    \"express-rate-limit\": \"^6.10.0\",\n    \"nodemailer\": \"^6.9.4\",\n    \"dotenv\": \"^16.3.1\",\n    \"compression\": \"^1.7.4\",\n    \"morgan\": \"^1.10.0\",\n    \"express-validator\": \"^7.0.1\",\n    \"moment\": \"^2.29.4\",\n    \"uuid\": \"^9.0.0\"\n  },\n  \"devDependencies\": {\n    \"nodemon\": \"^3.0.1\",\n    \"jest\": \"^29.6.2\",\n    \"supertest\": \"^6.3.3\",\n    \"@types/jest\": \"^29.5.4\"\n  },\n  \"engines\": {\n    \"node\": \">=16.0.0\"\n  }\n}\n```\n\n## 3. ENVIRONMENT CONFIGURATION\n\n### .env.example\n```env\n# Server Configuration\nNODE_ENV=development\nPORT=5000\nAPI_URL=http://localhost:5000\n\n# Database\nMONGODB_URI=mongodb://localhost:27017/romanian-dating\nMONGODB_TEST_URI=mongodb://localhost:27017/romanian-dating-test\n\n# JWT\nJWT_SECRET=your-super-secret-jwt-key-here\nJWT_EXPIRE=7d\nJWT_REFRESH_SECRET=your-refresh-secret-here\nJWT_REFRESH_EXPIRE=30d\n\n# Cloudinary\nCLOUDINARY_CLOUD_NAME=your-cloud-name\nCLOUDINARY_API_KEY=your-api-key\nCLOUDINARY_API_SECRET=your-api-secret\n\n# Email\nSMTP_HOST=smtp.gmail.com\nSMTP_PORT=587\nSMTP_USER=your-email@gmail.com\nSMTP_PASS=your-app-password\n\n# Rate Limiting\nRATE_LIMIT_WINDOW=15\nRATE_LIMIT_MAX=100\n\n# CORS\nFRONTEND_URL=http://localhost:3000\n```\n\n## 4. SERVER SETUP\n\n### server.js\n```javascript\nconst app = require('./src/app');\nconst connectDB = require('./src/config/database');\nconst { createServer } = require('http');\nconst { Server } = require('socket.io');\nconst socketHandler = require('./src/socket/socketHandler');\n\nconst PORT = process.env.PORT || 5000;\n\n// Conectare la baza de date\nconnectDB();\n\n// Crearea serverului HTTP\nconst server = createServer(app);\n\n// Configurarea Socket.IO\nconst io = new Server(server, {\n  cors: {\n    origin: process.env.FRONTEND_URL || \"http://localhost:3000\",\n    methods: [\"GET\", \"POST\"]\n  }\n});\n\n// Inițializarea Socket.IO\nsocketHandler(io);\n\n// Pornirea serverului\nserver.listen(PORT, () => {\n  console.log(`🚀 Server rulează pe portul ${PORT}`);\n  console.log(`📊 Environment: ${process.env.NODE_ENV}`);\n  console.log(`🌐 API URL: ${process.env.API_URL || `http://localhost:${PORT}`}`);\n});\n\n// Gestionarea erorilor neașteptate\nprocess.on('unhandledRejection', (err) => {\n  console.error('Unhandled Rejection:', err);\n  server.close(() => {\n    process.exit(1);\n  });\n});\n\nprocess.on('uncaughtException', (err) => {\n  console.error('Uncaught Exception:', err);\n  process.exit(1);\n});\n```\n\n### src/app.js\n```javascript\nconst express = require('express');\nconst cors = require('cors');\nconst helmet = require('helmet');\nconst compression = require('compression');\nconst morgan = require('morgan');\nconst rateLimit = require('express-rate-limit');\nrequire('dotenv').config();\n\nconst errorHandler = require('./middleware/errorHandler');\n\n// Import routes\nconst authRoutes = require('./routes/auth');\nconst userRoutes = require('./routes/users');\nconst matchRoutes = require('./routes/matches');\nconst messageRoutes = require('./routes/messages');\nconst uploadRoutes = require('./routes/upload');\n\nconst app = express();\n\n// Security middleware\napp.use(helmet());\napp.use(compression());\n\n// CORS configuration\napp.use(cors({\n  origin: process.env.FRONTEND_URL || 'http://localhost:3000',\n  credentials: true,\n  methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH'],\n  allowedHeaders: ['Content-Type', 'Authorization']\n}));\n\n// Rate limiting\nconst limiter = rateLimit({\n  windowMs: (process.env.RATE_LIMIT_WINDOW || 15) * 60 * 1000,\n  max: process.env.RATE_LIMIT_MAX || 100,\n  message: {\n    error: 'Prea multe cereri. Încearcă din nou mai târziu.'\n  }\n});\napp.use('/api/', limiter);\n\n// Body parsing middleware\napp.use(express.json({ limit: '10mb' }));\napp.use(express.urlencoded({ extended: true, limit: '10mb' }));\n\n// Logging\nif (process.env.NODE_ENV === 'development') {\n  app.use(morgan('dev'));\n} else {\n  app.use(morgan('combined'));\n}\n\n// Health check endpoint\napp.get('/health', (req, res) => {\n  res.status(200).json({\n    status: 'success',\n    message: 'Server is running',\n    timestamp: new Date().toISOString(),\n    environment: process.env.NODE_ENV\n  });\n});\n\n// API routes\napp.use('/api/auth', authRoutes);\napp.use('/api/users', userRoutes);\napp.use('/api/matches', matchRoutes);\napp.use('/api/messages', messageRoutes);\napp.use('/api/upload', uploadRoutes);\n\n// 404 handler\napp.use('*', (req, res) => {\n  res.status(404).json({\n    status: 'error',\n    message: `Ruta ${req.originalUrl} nu a fost găsită`\n  });\n});\n\n// Error handling middleware\napp.use(errorHandler);\n\nmodule.exports = app;\n```\n\n## 5. DATABASE CONFIGURATION\n\n### src/config/database.js\n```javascript\nconst mongoose = require('mongoose');\n\nconst connectDB = async () => {\n  try {\n    const mongoURI = process.env.NODE_ENV === 'test' \n      ? process.env.MONGODB_TEST_URI \n      : process.env.MONGODB_URI;\n\n    const conn = await mongoose.connect(mongoURI, {\n      useNewUrlParser: true,\n      useUnifiedTopology: true,\n    });\n\n    console.log(`🍃 MongoDB conectat: ${conn.connection.host}`);\n\n    // Event listeners pentru conexiune\n    mongoose.connection.on('error', (err) => {\n      console.error('Eroare MongoDB:', err);\n    });\n\n    mongoose.connection.on('disconnected', () => {\n      console.log('MongoDB deconectat');\n    });\n\n    // Graceful shutdown\n    process.on('SIGINT', async () => {\n      await mongoose.connection.close();\n      console.log('Conexiunea MongoDB închisă prin SIGINT');\n      process.exit(0);\n    });\n\n  } catch (error) {\n    console.error('Eroare la conectarea MongoDB:', error);\n    process.exit(1);\n  }\n};\n\nmodule.exports = connectDB;\n```\n\n## 6. MODELS\n\n### src/models/User.js\n```javascript\nconst mongoose = require('mongoose');\nconst bcrypt = require('bcryptjs');\nconst jwt = require('jsonwebtoken');\n\nconst userSchema = new mongoose.Schema({\n  email: {\n    type: String,\n    required: [true, 'Email-ul este obligatoriu'],\n    unique: true,\n    lowercase: true,\n    match: [/^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/, 'Email invalid']\n  },\n  password: {\n    type: String,\n    required: [true, 'Parola este obligatorie'],\n    minlength: [6, 'Parola trebuie să aibă minim 6 caractere'],\n    select: false\n  },\n  profile: {\n    firstName: {\n      type: String,\n      required: [true, 'Prenumele este obligatoriu'],\n      trim: true,\n      maxlength: [50, 'Prenumele nu poate depăși 50 de caractere']\n    },\n    lastName: {\n      type: String,\n      required: [true, 'Numele este obligatoriu'],\n      trim: true,\n      maxlength: [50, 'Numele nu poate depăși 50 de caractere']\n    },\n    dateOfBirth: {\n      type: Date,\n      required: [true, 'Data nașterii este obligatorie']\n    },\n    gender: {\n      type: String,\n      required: [true, 'Genul este obligatoriu'],\n      enum: ['bărbat', 'femeie', 'altul']\n    },\n    interestedIn: {\n      type: String,\n      required: [true, 'Preferința este obligatorie'],\n      enum: ['bărbați', 'femei', 'ambele']\n    },\n    bio: {\n      type: String,\n      maxlength: [500, 'Biografia nu poate depăși 500 de caractere']\n    },\n    photos: [{\n      url: String,\n      publicId: String,\n      isMain: {\n        type: Boolean,\n        default: false\n      }\n    }],\n    location: {\n      city: {\n        type: String,\n        required: [true, 'Orașul este obligatoriu']\n      },\n      county: {\n        type: String,\n        required: [true, 'Județul este obligatoriu']\n      },\n      coordinates: {\n        type: [Number], // [longitude, latitude]\n        index: '2dsphere'\n      }\n    },\n    interests: [{\n      type: String,\n      trim: true\n    }],\n    education: String,\n    profession: String,\n    height: Number,\n    smoking: {\n      type: String,\n      enum: ['niciodată', 'ocazional', 'regulat', 'prefer să nu spun']\n    },\n    drinking: {\n      type: String,\n      enum: ['niciodată', 'ocazional', 'regulat', 'prefer să nu spun']\n    },\n    relationshipType: {\n      type: String,\n      enum: ['relație serioasă', 'ceva casual', 'prietenie', 'nu știu încă']\n    }\n  },\n  preferences: {\n    ageRange: {\n      min: {\n        type: Number,\n        default: 18,\n        min: 18\n      },\n      max: {\n        type: Number,\n        default: 99,\n        max: 99\n      }\n    },\n    maxDistance: {\n      type: Number,\n      default: 50, // km\n      min: 1,\n      max: 500\n    },\n    showMe: {\n      type: String,\n      enum: ['bărbați', 'femei', 'ambele'],\n      default: 'ambele'\n    }\n  },\n  settings: {\n    isVisible: {\n      type: Boolean,\n      default: true\n    },\n    showDistance: {\n      type: Boolean,\n      default: true\n    },\n    showAge: {\n      type: Boolean,\n      default: true\n    },\n    notifications: {\n      matches: {\n        type: Boolean,\n        default: true\n      },\n      messages: {\n        type: Boolean,\n        default: true\n      },\n      likes: {\n        type: Boolean,\n        default: true\n      }\n    }\n  },\n  activity: {\n    lastSeen: {\n      type: Date,\n      default: Date.now\n    },\n    isOnline: {\n      type: Boolean,\n      default: false\n    },\n    socketId: String\n  },\n  verification: {\n    isEmailVerified: {\n      type: Boolean,\n      default: false\n    },\n    emailVerificationToken: String,\n    emailVerificationExpires: Date,\n    isPhotoVerified: {\n      type: Boolean,\n      default: false\n    }\n  },\n  subscription: {\n    type: {\n      type: String,\n      enum: ['free', 'premium', 'gold'],\n      default: 'free'\n    },\n    expiresAt: Date,\n    features: {\n      unlimitedLikes: {\n        type: Boolean,\n        default: false\n      },\n      superLikes: {\n        type: Number,\n        default: 0\n      },\n      boosts: {\n        type: Number,\n        default: 0\n      },\n      seeWhoLikesYou: {\n        type: Boolean,\n        default: false\n      }\n    }\n  },\n  stats: {\n    likesGiven: {\n      type: Number,\n      default: 0\n    },\n    likesReceived: {\n      type: Number,\n      default: 0\n    },\n    matches: {\n      type: Number,\n      default: 0\n    },\n    profileViews: {\n      type: Number,\n      default: 0\n    }\n  },\n  blocked: [{\n    user: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: 'User'\n    },\n    reason: String,\n    blockedAt: {\n      type: Date,\n      default: Date.now\n    }\n  }],\n  reported: [{\n    reportedBy: {\n      type: mongoose.Schema.Types.ObjectId,\n      ref: 'User'\n    },\n    reason: String,\n    reportedAt: {\n      type: Date,\n      default: Date.now\n    }\n  }],\n  resetPasswordToken: String,\n  resetPasswordExpires: Date\n}, {\n  timestamps: true,\n  toJSON: { virtuals: true },\n  toObject: { virtuals: true }\n});\n\n// Virtual pentru vârstă\nuserSchema.virtual('age').get(function() {\n  if (!this.profile.dateOfBirth) return null;\n  const today = new Date();\n  const birthDate = new Date(this.profile.dateOfBirth);\n  let age = today.getFullYear() - birthDate.getFullYear();\n  const monthDiff = today.getMonth() - birthDate.getMonth();\n  if (monthDiff < 0 || (monthDiff === 0 &&",
  "created_at": "2025-09-13T20:00:47.291Z",
  "created_by": "Backend Developer AI"
}