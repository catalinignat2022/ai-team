{
  "feature_name": "Romanian Dating App frontend for existing backend API at romanian-dating-backend-api",
  "implementation_plan": "# Romanian Dating App Frontend - Implementation Plan\n\n## 1. COMPONENT BREAKDOWN\n\n### Component Hierarchy\n```\nApp\n├── AuthProvider (Context)\n├── Router\n│   ├── PublicRoute\n│   │   ├── LoginPage\n│   │   ├── RegisterPage\n│   │   └── LandingPage\n│   └── PrivateRoute\n│       ├── Dashboard\n│       ├── ProfilePage\n│       ├── EditProfilePage\n│       └── MatchesPage\n└── Components\n    ├── Auth\n    │   ├── LoginForm\n    │   ├── RegisterForm\n    │   └── AuthGuard\n    ├── Profile\n    │   ├── ProfileCard\n    │   ├── ProfileForm\n    │   ├── PhotoUpload\n    │   └── ProfilePreview\n    └── Common\n        ├── Header\n        ├── Loading\n        ├── ErrorBoundary\n        └── Toast\n```\n\n### Props Interfaces\n```typescript\n// types/auth.ts\nexport interface User {\n  id: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n  age: number;\n  city: string;\n  profileComplete: boolean;\n  photos: string[];\n  bio?: string;\n  interests: string[];\n  createdAt: string;\n}\n\nexport interface AuthState {\n  user: User | null;\n  token: string | null;\n  isLoading: boolean;\n  isAuthenticated: boolean;\n}\n\nexport interface LoginCredentials {\n  email: string;\n  password: string;\n}\n\nexport interface RegisterData {\n  email: string;\n  password: string;\n  firstName: string;\n  lastName: string;\n  age: number;\n  city: string;\n}\n\n// types/profile.ts\nexport interface ProfileUpdateData {\n  firstName?: string;\n  lastName?: string;\n  age?: number;\n  city?: string;\n  bio?: string;\n  interests?: string[];\n}\n\nexport interface PhotoUploadResponse {\n  url: string;\n  publicId: string;\n}\n```\n\n## 2. STATE MANAGEMENT\n\n### Context-based State Management\n```typescript\n// contexts/AuthContext.tsx\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { authService } from '../services/authService';\nimport { AuthState, User } from '../types/auth';\n\ninterface AuthContextType extends AuthState {\n  login: (credentials: LoginCredentials) => Promise<void>;\n  register: (data: RegisterData) => Promise<void>;\n  logout: () => void;\n  updateProfile: (data: ProfileUpdateData) => Promise<void>;\n  refreshUser: () => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\ntype AuthAction =\n  | { type: 'AUTH_START' }\n  | { type: 'AUTH_SUCCESS'; payload: { user: User; token: string } }\n  | { type: 'AUTH_FAILURE' }\n  | { type: 'UPDATE_USER'; payload: User }\n  | { type: 'LOGOUT' };\n\nconst authReducer = (state: AuthState, action: AuthAction): AuthState => {\n  switch (action.type) {\n    case 'AUTH_START':\n      return { ...state, isLoading: true };\n    case 'AUTH_SUCCESS':\n      return {\n        ...state,\n        isLoading: false,\n        isAuthenticated: true,\n        user: action.payload.user,\n        token: action.payload.token,\n      };\n    case 'AUTH_FAILURE':\n      return {\n        ...state,\n        isLoading: false,\n        isAuthenticated: false,\n        user: null,\n        token: null,\n      };\n    case 'UPDATE_USER':\n      return {\n        ...state,\n        user: action.payload,\n      };\n    case 'LOGOUT':\n      return {\n        user: null,\n        token: null,\n        isLoading: false,\n        isAuthenticated: false,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [state, dispatch] = useReducer(authReducer, {\n    user: null,\n    token: localStorage.getItem('token'),\n    isLoading: false,\n    isAuthenticated: false,\n  });\n\n  useEffect(() => {\n    const initAuth = async () => {\n      const token = localStorage.getItem('token');\n      if (token) {\n        try {\n          dispatch({ type: 'AUTH_START' });\n          const user = await authService.getCurrentUser();\n          dispatch({ type: 'AUTH_SUCCESS', payload: { user, token } });\n        } catch (error) {\n          localStorage.removeItem('token');\n          dispatch({ type: 'AUTH_FAILURE' });\n        }\n      }\n    };\n    initAuth();\n  }, []);\n\n  const login = async (credentials: LoginCredentials) => {\n    dispatch({ type: 'AUTH_START' });\n    try {\n      const { user, token } = await authService.login(credentials);\n      localStorage.setItem('token', token);\n      dispatch({ type: 'AUTH_SUCCESS', payload: { user, token } });\n    } catch (error) {\n      dispatch({ type: 'AUTH_FAILURE' });\n      throw error;\n    }\n  };\n\n  const register = async (data: RegisterData) => {\n    dispatch({ type: 'AUTH_START' });\n    try {\n      const { user, token } = await authService.register(data);\n      localStorage.setItem('token', token);\n      dispatch({ type: 'AUTH_SUCCESS', payload: { user, token } });\n    } catch (error) {\n      dispatch({ type: 'AUTH_FAILURE' });\n      throw error;\n    }\n  };\n\n  const logout = () => {\n    localStorage.removeItem('token');\n    dispatch({ type: 'LOGOUT' });\n  };\n\n  const updateProfile = async (data: ProfileUpdateData) => {\n    try {\n      const updatedUser = await authService.updateProfile(data);\n      dispatch({ type: 'UPDATE_USER', payload: updatedUser });\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  const refreshUser = async () => {\n    try {\n      const user = await authService.getCurrentUser();\n      dispatch({ type: 'UPDATE_USER', payload: user });\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        ...state,\n        login,\n        register,\n        logout,\n        updateProfile,\n        refreshUser,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n```\n\n## 3. API INTEGRATION\n\n### API Service Layer\n```typescript\n// services/apiClient.ts\nimport axios, { AxiosInstance, AxiosResponse } from 'axios';\n\nclass ApiClient {\n  private client: AxiosInstance;\n\n  constructor() {\n    this.client = axios.create({\n      baseURL: process.env.REACT_APP_API_URL || 'http://localhost:3001/api',\n      timeout: 10000,\n    });\n\n    this.setupInterceptors();\n  }\n\n  private setupInterceptors() {\n    // Request interceptor\n    this.client.interceptors.request.use(\n      (config) => {\n        const token = localStorage.getItem('token');\n        if (token) {\n          config.headers.Authorization = `Bearer ${token}`;\n        }\n        return config;\n      },\n      (error) => Promise.reject(error)\n    );\n\n    // Response interceptor\n    this.client.interceptors.response.use(\n      (response: AxiosResponse) => response,\n      (error) => {\n        if (error.response?.status === 401) {\n          localStorage.removeItem('token');\n          window.location.href = '/login';\n        }\n        return Promise.reject(error);\n      }\n    );\n  }\n\n  async get<T>(url: string): Promise<T> {\n    const response = await this.client.get<T>(url);\n    return response.data;\n  }\n\n  async post<T>(url: string, data?: any): Promise<T> {\n    const response = await this.client.post<T>(url, data);\n    return response.data;\n  }\n\n  async put<T>(url: string, data?: any): Promise<T> {\n    const response = await this.client.put<T>(url, data);\n    return response.data;\n  }\n\n  async delete<T>(url: string): Promise<T> {\n    const response = await this.client.delete<T>(url);\n    return response.data;\n  }\n\n  async uploadFile<T>(url: string, file: File): Promise<T> {\n    const formData = new FormData();\n    formData.append('file', file);\n    \n    const response = await this.client.post<T>(url, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n    return response.data;\n  }\n}\n\nexport const apiClient = new ApiClient();\n```\n\n### Authentication Service\n```typescript\n// services/authService.ts\nimport { apiClient } from './apiClient';\nimport { User, LoginCredentials, RegisterData, ProfileUpdateData } from '../types/auth';\n\ninterface AuthResponse {\n  user: User;\n  token: string;\n}\n\nclass AuthService {\n  async login(credentials: LoginCredentials): Promise<AuthResponse> {\n    try {\n      return await apiClient.post<AuthResponse>('/auth/login', credentials);\n    } catch (error: any) {\n      throw new Error(error.response?.data?.message || 'Login failed');\n    }\n  }\n\n  async register(data: RegisterData): Promise<AuthResponse> {\n    try {\n      return await apiClient.post<AuthResponse>('/auth/register', data);\n    } catch (error: any) {\n      throw new Error(error.response?.data?.message || 'Registration failed');\n    }\n  }\n\n  async getCurrentUser(): Promise<User> {\n    try {\n      return await apiClient.get<User>('/auth/me');\n    } catch (error: any) {\n      throw new Error(error.response?.data?.message || 'Failed to get user');\n    }\n  }\n\n  async updateProfile(data: ProfileUpdateData): Promise<User> {\n    try {\n      return await apiClient.put<User>('/profile', data);\n    } catch (error: any) {\n      throw new Error(error.response?.data?.message || 'Profile update failed');\n    }\n  }\n\n  async uploadPhoto(file: File): Promise<{ url: string }> {\n    try {\n      return await apiClient.uploadFile<{ url: string }>('/profile/photos', file);\n    } catch (error: any) {\n      throw new Error(error.response?.data?.message || 'Photo upload failed');\n    }\n  }\n\n  async deletePhoto(photoUrl: string): Promise<void> {\n    try {\n      await apiClient.delete(`/profile/photos`, { data: { photoUrl } });\n    } catch (error: any) {\n      throw new Error(error.response?.data?.message || 'Photo deletion failed');\n    }\n  }\n}\n\nexport const authService = new AuthService();\n```\n\n## 4. IMPLEMENTATION STEPS\n\n### Step 1: Project Setup\n```bash\n# Create React app with TypeScript\nnpx create-react-app romanian-dating-app --template typescript\n\n# Install dependencies\nnpm install axios react-router-dom\nnpm install -D @types/react-router-dom\n\n# Install UI library (optional)\nnpm install @mui/material @emotion/react @emotion/styled\n```\n\n### Step 2: Authentication Components\n```typescript\n// components/Auth/LoginForm.tsx\nimport React, { useState } from 'react';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { LoginCredentials } from '../../types/auth';\n\nexport const LoginForm: React.FC = () => {\n  const [credentials, setCredentials] = useState<LoginCredentials>({\n    email: '',\n    password: '',\n  });\n  const [error, setError] = useState<string>('');\n  const { login, isLoading } = useAuth();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError('');\n    \n    try {\n      await login(credentials);\n    } catch (err: any) {\n      setError(err.message);\n    }\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setCredentials({\n      ...credentials,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"login-form\">\n      <h2>Conectează-te</h2>\n      \n      {error && <div className=\"error-message\">{error}</div>}\n      \n      <div className=\"form-group\">\n        <label htmlFor=\"email\">Email</label>\n        <input\n          type=\"email\"\n          id=\"email\"\n          name=\"email\"\n          value={credentials.email}\n          onChange={handleChange}\n          required\n          disabled={isLoading}\n        />\n      </div>\n\n      <div className=\"form-group\">\n        <label htmlFor=\"password\">Parolă</label>\n        <input\n          type=\"password\"\n          id=\"password\"\n          name=\"password\"\n          value={credentials.password}\n          onChange={handleChange}\n          required\n          disabled={isLoading}\n        />\n      </div>\n\n      <button type=\"submit\" disabled={isLoading}>\n        {isLoading ? 'Se conectează...' : 'Conectează-te'}\n      </button>\n    </form>\n  );\n};\n```\n\n### Step 3: Profile Management Components\n```typescript\n// components/Profile/ProfileForm.tsx\nimport React, { useState, useEffect } from 'react';\nimport { useAuth } from '../../contexts/AuthContext';\nimport { ProfileUpdateData } from '../../types/auth';\n\nexport const ProfileForm: React.FC = () => {\n  const { user, updateProfile, isLoading } = useAuth();\n  const [formData, setFormData] = useState<ProfileUpdateData>({\n    firstName: '',\n    lastName: '',\n    age: 18,\n    city: '',\n    bio: '',\n    interests: [],\n  });\n  const [error, setError] = useState<string>('');\n  const [success, setSuccess] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (user) {\n      setFormData({\n        firstName: user.firstName,\n        lastName: user.lastName,\n        age: user.age,\n        city: user.city,\n        bio: user.bio || '',\n        interests: user.interests,\n      });\n    }\n  }, [user]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError('');\n    setSuccess(false);\n\n    try {\n      await updateProfile(formData);\n      setSuccess(true);\n    } catch (err: any) {\n      setError(err.message);\n    }\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  const handleInterestToggle = (interest: string) => {\n    const updatedInterests = formData.interests?.includes(interest)\n      ? formData.interests.filter(i => i !== interest)\n      : [...(formData.interests || []), interest];\n    \n    setFormData({\n      ...formData,\n      interests: updatedInterests,\n    });\n  };\n\n  ",
  "created_at": "2025-09-13T18:59:39.383Z",
  "created_by": "Frontend Developer AI"
}